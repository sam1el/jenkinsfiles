pipeline {
  agent { label 'devwin' }
  stages {
    stage('Setup') {
      steps {
        powershell('''chef shell-init powershell''')
        powershell('''echo "Versions:"''')
        powershell('''chef --version''')
        powershell('''rubocop --version''')
        powershell('''foodcritic --version''')
        powershell('''echo "Updating Berkshelf:"
        If (Test-Path -Path Policyfile.rb) {chef install Policyfile.rb --chef-license accept} Else {"File not found"}'''
        // Line 17 has been set up to run policyfile as an example use next line for berks.
        // If (Test-Path -Path Berksfile.lock) {berks install) Else {berks update}
        )
      }
    }
  
stage('Acceptance Testing') {
      steps {
            parallel(
              Rubocop: {
            powershell('''echo "Starting chefstyle (rubocop): "''')
            powershell('''rubocop --color''')
              },
              FoodCritic: {
            powershell('''echo "Starting foodcritic: "''')
            powershell('''foodcritic . --tags -FC078''')
              },
              ChefSpec: {
            powershell('''echo Starting ChefSpec: ''')
            powershell('''chef exec rspec''')
              }
            )
          }
        }
      
      
    stage('Test Kitchen') {
      steps {
        sh 'kitchen test -d always --color'
      }
    }
  }

post {
    success {
      script{
      if( env.BRANCH_NAME == 'dev' ) {
        sshagent(credentials: ['jenkins-generated-ssh-key']) {
        sh 'git request-pull -p origin/master git@gitlab.com:jbrimager/audit_wrap.git dev'
        }
      } else if (env.BRANCH_NAME == 'master') {
          echo "berks or policyfile install steps here"
        } 
      }
    }
    failure {
      echo "The build failed"
      sh "sudo rm -rf $WORKSPACE/*"
      }
    }
  }  
